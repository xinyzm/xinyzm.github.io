<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>快速搭建 K8S 集群环境</title>
      <link href="/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAK8S%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83/"/>
      <url>/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAK8S%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>说明：首先准备三台主机，一台作为 Master 节点，另外两台作为 Node 节点</p><h3 id="1、设置主机名以及-hosts-文件"><a href="#1、设置主机名以及-hosts-文件" class="headerlink" title="1、设置主机名以及 hosts 文件"></a>1、设置主机名以及 hosts 文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;hostname</span><br><span class="line">k8s-master&#x2F;k8s-node01&#x2F;k8s-node02</span><br><span class="line"></span><br><span class="line">vi &#x2F;etc&#x2F;hosts</span><br><span class="line"># 在文件最后添加如下配置（ip根据实际情况填写）</span><br><span class="line">192.168.11.53 k8s-master</span><br><span class="line">192.168.11.54 k8s-node01</span><br><span class="line">192.168.11.55 k8s-node02</span><br></pre></td></tr></table></figure><h3 id="2、搭建-Docker-环境"><a href="#2、搭建-Docker-环境" class="headerlink" title="2、搭建 Docker 环境"></a>2、搭建 Docker 环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1）安装 docker</span><br><span class="line">curl -sSL https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker | sh</span><br><span class="line"></span><br><span class="line">2）启动服务</span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line">3）查看服务状态</span><br><span class="line">systemctl status docker</span><br><span class="line"></span><br><span class="line">4）设置开机自启动</span><br><span class="line">systemctl enable docker</span><br><span class="line"></span><br><span class="line">5）docker镜像加速</span><br><span class="line">curl -sSL https:&#x2F;&#x2F;get.daocloud.io&#x2F;daotools&#x2F;set_mirror.sh | sh -s http:&#x2F;&#x2F;f1361db2.m.daocloud.io</span><br></pre></td></tr></table></figure><h3 id="3、配置阿里云的软件源（https-opsx-alibaba-com-mirror）"><a href="#3、配置阿里云的软件源（https-opsx-alibaba-com-mirror）" class="headerlink" title="3、配置阿里云的软件源（https://opsx.alibaba.com/mirror）"></a>3、配置阿里云的软件源（<a href="https://opsx.alibaba.com/mirror" target="_blank" rel="noopener">https://opsx.alibaba.com/mirror</a>）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; &#x2F;etc&#x2F;yum.repos.d&#x2F;kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name&#x3D;Kubernetes</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;repos&#x2F;kubernetes-el7-x86_64&#x2F;</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line">repo_gpgcheck&#x3D;1</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;yum-key.gpg https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="4、将-SELinux-设置为-permissive-模式（相当于将其禁用）"><a href="#4、将-SELinux-设置为-permissive-模式（相当于将其禁用）" class="headerlink" title="4、将 SELinux 设置为 permissive 模式（相当于将其禁用）"></a>4、将 SELinux 设置为 permissive 模式（相当于将其禁用）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line">sed -i &#39;s&#x2F;^SELINUX&#x3D;enforcing$&#x2F;SELINUX&#x3D;permissive&#x2F;&#39; &#x2F;etc&#x2F;selinux&#x2F;config</span><br></pre></td></tr></table></figure><h3 id="5、关闭防火墙（也可以关闭指定端口）"><a href="#5、关闭防火墙（也可以关闭指定端口）" class="headerlink" title="5、关闭防火墙（也可以关闭指定端口）"></a>5、关闭防火墙（也可以关闭指定端口）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure><h3 id="6、安装相关软件"><a href="#6、安装相关软件" class="headerlink" title="6、安装相关软件"></a>6、安装相关软件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y kubelet kubeadm kubectl --disableexcludes&#x3D;kubernetes</span><br></pre></td></tr></table></figure><h3 id="7、关闭-Swap"><a href="#7、关闭-Swap" class="headerlink" title="7、关闭 Swap"></a>7、关闭 Swap</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 修改kubelet禁止提示swap警告，最好关闭swap</span><br><span class="line">vi &#x2F;etc&#x2F;sysconfig&#x2F;kubelet</span><br><span class="line"></span><br><span class="line"># 如果配置了swap不然提示出错信息</span><br><span class="line">KUBELET_EXTRA_ARGS&#x3D;&quot;--fail-swap-on&#x3D;false&quot;</span><br><span class="line"></span><br><span class="line"># 关闭swap</span><br><span class="line">swapoff -a</span><br><span class="line"></span><br><span class="line"># 修改系统文件使得机器bridge模式开启</span><br><span class="line">echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;bridge&#x2F;bridge-nf-call-iptables</span><br></pre></td></tr></table></figure><h3 id="8、设置开机自启动"><a href="#8、设置开机自启动" class="headerlink" title="8、设置开机自启动"></a>8、设置开机自启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable --now kubelet</span><br></pre></td></tr></table></figure><h3 id="9、初始化集群（Master-节点执行）"><a href="#9、初始化集群（Master-节点执行）" class="headerlink" title="9、初始化集群（Master 节点执行）"></a>9、初始化集群（Master 节点执行）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --pod-network-cidr&#x3D;10.244.0.0&#x2F;16 --ignore-preflight-errors&#x3D;Swap --apiserver-advertise-address&#x3D;192.168.11.53 --image-repository registry.aliyuncs.com&#x2F;google_containers</span><br><span class="line"></span><br><span class="line">mkdir -p $HOME&#x2F;.kube</span><br><span class="line">sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</span><br></pre></td></tr></table></figure><h3 id="10、将-Node-节点加入集群（注意每个人的token是不一样的，请以自己的为准）"><a href="#10、将-Node-节点加入集群（注意每个人的token是不一样的，请以自己的为准）" class="headerlink" title="10、将 Node 节点加入集群（注意每个人的token是不一样的，请以自己的为准）"></a>10、将 Node 节点加入集群（注意每个人的token是不一样的，请以自己的为准）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join 192.168.11.53:6443 --token qhnrm8.oxvjftyhpf9y7w43 \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:ddd66aab82248e097151c77cde35356139d683b77c38e5e6dadf14804f2fe648</span><br></pre></td></tr></table></figure><h3 id="11-配置-flannel-网络（Master-节点执行）"><a href="#11-配置-flannel-网络（Master-节点执行）" class="headerlink" title="11.配置 flannel 网络（Master 节点执行）"></a>11.配置 flannel 网络（Master 节点执行）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;coreos&#x2F;flannel&#x2F;master&#x2F;Documentation&#x2F;kube-flannel.yml</span><br></pre></td></tr></table></figure><p>在执行上述命令时，出现如下错误<strong>The connection to the server raw.githubusercontent.com was refused - did you specify the right host or port?</strong>，错误原因是这个网址必须能够访问国外网站才能正常访问。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://cloud.tencent.com/developer/article/1458931" target="_blank" rel="noopener">手把手教你搭建k8s测试环境</a></p><p><a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/" target="_blank" rel="noopener">K8S官网 - 安装 kubeadm</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7 环境下快速搭建服务节点</title>
      <link href="/CentOS7%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E8%8A%82%E7%82%B9/"/>
      <url>/CentOS7%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="1、安装-docker-环境"><a href="#1、安装-docker-环境" class="headerlink" title="1、安装 docker  环境"></a>1、安装 docker  环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1）安装 docker</span><br><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br><span class="line"></span><br><span class="line">2）启动服务</span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line">3）查看服务状态</span><br><span class="line">systemctl status docker</span><br><span class="line"></span><br><span class="line">4）设置开机自启动</span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><p>官方文档：<a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener">https://docs.docker.com/engine/install/centos/</a></p><h3 id="2、实现-docker-镜像加速"><a href="#2、实现-docker-镜像加速" class="headerlink" title="2、实现 docker 镜像加速"></a>2、实现 docker 镜像加速</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io</span><br></pre></td></tr></table></figure><h3 id="3、安装-docker-compose"><a href="#3、安装-docker-compose" class="headerlink" title="3、安装 docker-compose"></a>3、安装 docker-compose</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.27.4/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="4、开放指定端口"><a href="#4、开放指定端口" class="headerlink" title="4、开放指定端口"></a>4、开放指定端口</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 请将 * 修改成需要开放的端口（请自行查看 docker-compose.yml 文件中的 ports 属性）</span></span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=*/tcp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重载防火墙配置</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="5、将-docker-compose-yml-文件上传至-home-目录下"><a href="#5、将-docker-compose-yml-文件上传至-home-目录下" class="headerlink" title="5、将 docker-compose.yml 文件上传至 home 目录下"></a>5、将 docker-compose.yml 文件上传至 home 目录下</h3><h3 id="6、根据-docker-compose-yml-文件的-volumes-属性创建目录或上传文件到指定目录（只关注-home-目录相关）"><a href="#6、根据-docker-compose-yml-文件的-volumes-属性创建目录或上传文件到指定目录（只关注-home-目录相关）" class="headerlink" title="6、根据  docker-compose.yml 文件的 volumes 属性创建目录或上传文件到指定目录（只关注 home 目录相关）"></a>6、根据  docker-compose.yml 文件的 volumes 属性创建目录或上传文件到指定目录（只关注 home 目录相关）</h3><p>以 “<strong>/home/tomcat/conf/server.xml:/usr/local/tomcat/conf/server.xml</strong>”为例，根据这句脚本命令，我们需要在 home 目录下创建 tomcat 目录，然后在 tomcat 目录下创建 conf 目录，进入到 /home/tomcat/conf 目录，将 server.xml 文件上传到当前目录</p><h3 id="7、创建网络实现各容器之间的正常通信"><a href="#7、创建网络实现各容器之间的正常通信" class="headerlink" title="7、创建网络实现各容器之间的正常通信"></a>7、创建网络实现各容器之间的正常通信</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create arfysica</span><br></pre></td></tr></table></figure><h3 id="8、执行-docker-compose-yml-文件"><a href="#8、执行-docker-compose-yml-文件" class="headerlink" title="8、执行 docker-compose.yml 文件"></a>8、执行 docker-compose.yml 文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /home</span><br><span class="line"></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h3 id="9、查看容器是否启动成功"><a href="#9、查看容器是否启动成功" class="headerlink" title="9、查看容器是否启动成功"></a>9、查看容器是否启动成功</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p><img src="查看容器是否启动成功.png" alt="查看容器是否启动成功"></p><h3 id="10、执行-SQL-脚本"><a href="#10、执行-SQL-脚本" class="headerlink" title="10、执行 SQL 脚本"></a>10、执行 SQL 脚本</h3><p>（1）使用可视化 SQL 工具（推荐使用 navicat）</p><p>（2）连接数据库，数据库密码自行查看 docker-compose.yml 文件的 MYSQL_ROOT_PASSWORD 属性</p><p>（3）连接成功后，执行 SQL 脚本</p><h3 id="11、服务应用升级"><a href="#11、服务应用升级" class="headerlink" title="11、服务应用升级"></a>11、服务应用升级</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 直接将新的应用包替换原来的，如果是后端升级再执行下面的命令，前端升级直接替换即可</span></span><br><span class="line">docker restart tomcat</span><br></pre></td></tr></table></figure><h3 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h3><p>如果在首次安装启动服务时，后端应用访问异常，可能原因是当前应用在启动加载过程中需要访问数据库，这时数据库并不存在，从而导致服务异常，只需要重启服务即可，执行 <strong>docker restart tomcat</strong> 命令</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fiddler 抓包姿势小结</title>
      <link href="/Fiddler%E6%8A%93%E5%8C%85%E5%A7%BF%E5%8A%BF%E5%B0%8F%E7%BB%93/"/>
      <url>/Fiddler%E6%8A%93%E5%8C%85%E5%A7%BF%E5%8A%BF%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>在 Web 应用中调试代码比较容易，可以使用各大浏览器的开发者工具进行调试，但是在移动设备上调试代码就可能会受限。抓包工具就很好的打破了这个局限，无论是网页应用还是移动应用，都有用武之地。Windows 系统下有 <strong>Fiddler</strong>，Mac 系统下有 <strong>Charles</strong>，它们大体类似，在这里我们只对 Fiddler 的使用做一个介绍</p><p>在开始之前请自行下载 <a href="https://www.telerik.com/download/fiddler" target="_blank" rel="noopener">Fiddler</a> ，那就话不多少，直接上才艺 …</p><h2 id="基础篇-实现移动设备抓包"><a href="#基础篇-实现移动设备抓包" class="headerlink" title="基础篇 - 实现移动设备抓包"></a>基础篇 - 实现移动设备抓包</h2><h3 id="配置-Fiddler-代理"><a href="#配置-Fiddler-代理" class="headerlink" title="配置 Fiddler 代理"></a>配置 Fiddler 代理</h3><p>（1）打开菜单栏的 Tools，选择第一项 Options</p><p>（2）在弹出的对话框切换至 Connections 选项，配置 Fiddler 的监听端口，勾选 “Allow romote computers to connect” 以允许连接远程设备，配置完成后点击 OK 按钮</p><p><img src="配置Fiddler代理.png" alt="配置Fiddler代理"></p><p>（3）配置成功后就相当于把本机作为服务器，在你设置的端口下开启了一个服务，该服务主要的任务就是监听访问此服务器下的所有请求。另外，鼠标移入右上角的 Online 可查看本机的 IP 地址，此地址在设置移动设备的 HTTP 代理中会使用。</p><h3 id="过滤-IP"><a href="#过滤-IP" class="headerlink" title="过滤 IP"></a>过滤 IP</h3><p>默认情况下，Fiddler 会抓取所有访问的请求，这样可能会对抓取查看目标请求带来一定的视觉干扰，为了避免这样的干扰，可以通过设置过滤器 Filters，只过滤获取需要抓取的 IP 请求，按照下图步骤设置，设置完成后在第5步选择 “Run Filterset now”，这样左侧显出的请求就只有自己需要的请求列表了。</p><p><img src="过滤IP.png" alt="过滤IP"></p><h3 id="以苹果手机为例，设置-HTTP-代理"><a href="#以苹果手机为例，设置-HTTP-代理" class="headerlink" title="以苹果手机为例，设置 HTTP 代理"></a>以苹果手机为例，设置 HTTP 代理</h3><p>（1）抓取移动设备的请求前提是移动设备和配置 Fiddler 代理的设备在同一网段下</p><p>（2）进入 Wi-Fi 界面，点击已接入的 WiFi 名称，进入该网络的设置界面，找到 HTTP 代理项，选择手动模式，输入服务器 IP 和端口（具体 IP 和端口参见1.3），点击存储</p><p><img src="配置HTTP代理.png" alt="配置HTTP代理" style="zoom: 25%;" /></p><h2 id="进阶篇-抓取-Https-请求"><a href="#进阶篇-抓取-Https-请求" class="headerlink" title="进阶篇 - 抓取 Https 请求"></a>进阶篇 - 抓取 Https 请求</h2><h3 id="抓取前的准备（针对已安装-Fiddler-的用户）"><a href="#抓取前的准备（针对已安装-Fiddler-的用户）" class="headerlink" title="抓取前的准备（针对已安装 Fiddler 的用户）"></a>抓取前的准备（针对已安装 Fiddler 的用户）</h3><p>（1）清除 C 盘用户目录里的证书缓存，例如：C:\Users\Administrator\AppData\Roaming\Microsoft\Crypto\RSA，里面的文件全部清除</p><p>（2）清除电脑上的根证书，在运行中输入 certmgr.msc，打开菜单栏的操作按钮，选择查找证书，在包含项输入 fiddler，点击立即查找，将查找结果删除</p><p><img src="清除电脑上的根证书.png" alt="清除电脑上的根证书" style="zoom:80%;" /></p><p>（3）清除移动设备的证书（描述文件）。点击手机上的<strong>设备</strong>图标，选择<strong>通用</strong>，找到<strong>描述文件</strong>项，点击进入，这里就是所有已下载的描述文件的列表，找到带有 FiddlerRoot 字样的描述文件，移除描述文件</p><p>（4）进入谷歌浏览器的设置界面（输入 chrome://settings/ 直接进入），在<strong>隐私设置和安全性</strong>一栏，点击进入<strong>安全</strong>项，找到<strong>管理证书</strong>，清除带有 FiddlerRoot 字样的证书（说明：可能浏览器的版本差异，<strong>管理证书</strong>项的入口存在不同，如存在此情况请自行查找）</p><p><img src="清除浏览器的根证书.png" alt="清除浏览器的根证书"></p><p>（5）打开 Fiddler，打开菜单栏的 Tools，选择第一项 Options，在弹出的对话框切换至 HTTPS 选项，点击 Actions，选择最后一项 “Reset All certificates”，然后关闭 Fiddler。</p><h3 id="配置-Fiddler-支持-HTTPS"><a href="#配置-Fiddler-支持-HTTPS" class="headerlink" title="配置 Fiddler 支持 HTTPS"></a>配置 Fiddler 支持 HTTPS</h3><p>（1）打开菜单栏的 Tools，选择第一项 Options</p><p>（2）在弹出的对话框切换至 HTTPS 选项，如下图勾选相应项</p><p><img src="配置HTTPS代理.png" alt="配置HTTPS代理"></p><h3 id="抓取移动设备的-Https-请求（以苹果手机为例）"><a href="#抓取移动设备的-Https-请求（以苹果手机为例）" class="headerlink" title="抓取移动设备的 Https 请求（以苹果手机为例）"></a>抓取移动设备的 Https 请求（以苹果手机为例）</h3><p>（1）Fiddler 默认生成的证书不能满足 Android 和 iOS 系统的要求，下载 <a href="https://www.telerik.com/fiddler/add-ons" target="_blank" rel="noopener">CertMaker</a> 插件到本地，双击安装以生成支持移动设备的证书</p><p><img src="下载支持移动设备的插件.png" alt="下载支持移动设备的插件"></p><p>（2）配置支持 HTTPS（详参步骤2），点击 OK 按钮，期间会出现一些提示，默认都选 yes</p><p>（3）在 Safari 浏览器上输入服务器 IP 和端口，点击 FiddlerRoot certificate 链接下载 Fiddler 证书</p><p><img src="移动设备下载证书.png" alt="移动设备下载证书" style="zoom:25%;" /></p><p>（4）安装下载的描述文件（Fiddler 证书），将描述文件启用完全信任。点击手机上的<strong>设备</strong>图标，选择<strong>通用</strong>，找到<strong>关于本机</strong>项，点击进入，在最下面的<strong>证书信任设置</strong>里面找到带有 FiddlerRoot 字样的描述文件启用完全信任。设置完成后就可以抓取 Https 的请求了</p><h3 id="抓取浏览器的-Https-请求（以谷歌浏览器为例）"><a href="#抓取浏览器的-Https-请求（以谷歌浏览器为例）" class="headerlink" title="抓取浏览器的 Https 请求（以谷歌浏览器为例）"></a>抓取浏览器的 Https 请求（以谷歌浏览器为例）</h3><p>（1）配置支持 HTTPS（详参步骤2），点击 Actions，选择第二项 “Export Root Certificate to Desktop”，在桌面会产生 “FiddlerRoot.cer” 的证书文件，点击 OK 按钮，期间会出现一些提示，默认都选 yes</p><p>（2）进入谷歌浏览器的设置界面（输入 chrome://settings/ 直接进入），在<strong>隐私设置和安全性</strong>一栏，点击进入<strong>安全</strong>项，找到<strong>管理证书</strong>，将刚才产生的证书文件导入</p><p><img src="浏览器导入证书.png" alt="浏览器导入证书"></p><p>（3）重新打开 Fiddler，就可以抓取 Https 的请求了</p>]]></content>
      
      
      <categories>
          
          <category> 开发技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fiddler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins 和 Gitlab 配合执行项目任务</title>
      <link href="/Jenkins%E5%92%8CGitlab%E9%85%8D%E5%90%88%E6%89%A7%E8%A1%8C%E9%A1%B9%E7%9B%AE%E4%BB%BB%E5%8A%A1/"/>
      <url>/Jenkins%E5%92%8CGitlab%E9%85%8D%E5%90%88%E6%89%A7%E8%A1%8C%E9%A1%B9%E7%9B%AE%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="在-Gitlab-创建-git-项目"><a href="#在-Gitlab-创建-git-项目" class="headerlink" title="在 Gitlab 创建 git 项目"></a>在 Gitlab 创建 git 项目</h3><h3 id="使用-sshkey-命令创建一对-ssh-公私钥，用于-deploy"><a href="#使用-sshkey-命令创建一对-ssh-公私钥，用于-deploy" class="headerlink" title="使用 sshkey 命令创建一对 ssh 公私钥，用于 deploy"></a>使用 sshkey 命令创建一对 ssh 公私钥，用于 deploy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;youremail@xxx.com&quot; -f &quot;sshkey_filename&quot;</span><br></pre></td></tr></table></figure><h3 id="在-Jenkins-中添加-ssh-私钥凭据"><a href="#在-Jenkins-中添加-ssh-私钥凭据" class="headerlink" title="在 Jenkins 中添加 ssh 私钥凭据"></a>在 Jenkins 中添加 ssh 私钥凭据</h3><p>（1）选择凭据 - 系统 - 全局凭据 - 添加凭据</p><p><img src="添加凭据-1.jpg" alt="添加凭据-1"></p><p>（2）选择类型 <strong>SSH Username with private key</strong>，填写用户名和 ssh 私钥，如果生成公私钥的时候设置了 passphrase 就填写，否则不填</p><p><img src="填写凭证-2.jpg" alt="填写凭证-2"></p><h3 id="在-Gitlab-中配置-Deploy-Keys（添加-ssh-公钥）"><a href="#在-Gitlab-中配置-Deploy-Keys（添加-ssh-公钥）" class="headerlink" title="在 Gitlab 中配置 Deploy Keys（添加 ssh 公钥）"></a>在 Gitlab 中配置 Deploy Keys（添加 ssh 公钥）</h3><p>（1） 此步骤的前提是你拥有这个 git 项目的管理权限</p><p>（2） 选择 git 项目 - 设置 - 仓库 - Deploy Keys ，填写 ssh 公钥，保存</p><p><img src="配置deploy keys.jpg" alt="配置deploy keys"></p><p>（3）激活新增的 deploy key </p><p><img src="激活deploy key.jpg" alt="激活deploy key"></p><h3 id="在-Jenkins-中新建任务"><a href="#在-Jenkins-中新建任务" class="headerlink" title="在 Jenkins 中新建任务"></a>在 Jenkins 中新建任务</h3><h3 id="配置任务-源码管理"><a href="#配置任务-源码管理" class="headerlink" title="配置任务 - 源码管理"></a>配置任务 - 源码管理</h3><p>（1） 选择 Git</p><p>（2） 设置仓库地址，仓库地址从 Gitlab 中获取</p><p>（3） 凭据选择你刚才使用 ssh 私钥添加的凭据</p><p>（4） 指定分支，建议设置成 master</p><p>（5） 如果需要部署的项目目录不是根目录，通过 Additional Behaviours -&gt; Sparse Checkout paths（安装 Git Parameter 插件） -&gt; Path 设置</p><p><img src="配置任务-源码管理.jpg" alt="配置任务-源码管理"></p><h3 id="配置任务-构建触发器"><a href="#配置任务-构建触发器" class="headerlink" title="配置任务 - 构建触发器"></a>配置任务 - 构建触发器</h3><p>（1）勾选 Build when a change is pushed to Gitlab.</p><p>（2）查看 Jenkins 的 webhooks 的地址，点击高级按钮，生成 Secret token</p><p><img src="获取webhooks地址.jpg" alt="获取webhooks地址"><img src="生成Secret token.jpg" alt="生成Secret token"></p><p>（3） 选择 git 项目 - 设置 - 集成 ，填写 Webhooks 的 URL 和 Secret Token，取消勾选 Enable SSL verification</p><p><img src="填写webhooks和token.jpg" alt="填写webhooks和token"></p><h3 id="配置任务-构建"><a href="#配置任务-构建" class="headerlink" title="配置任务 - 构建"></a>配置任务 - 构建</h3><p>（1） 增加构建步骤 - 执行 shell </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 'Hello World!'</span><br></pre></td></tr></table></figure><h3 id="在-Gitlab-进行测试"><a href="#在-Gitlab-进行测试" class="headerlink" title="在 Gitlab 进行测试"></a>在 Gitlab 进行测试</h3><p>（1）选择 git 项目 - 设置 - 集成，在新创建的 Webhooks 下，点击 Test，选择 Push events</p><p>（2） 在 Jenkins 中查看新创建的任务是否正确执行并打印 <strong>Hello World!</strong></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 安装 jdk+tomcat+mysql</title>
      <link href="/CentOS%E5%AE%89%E8%A3%85jdk-tomcat-mysql/"/>
      <url>/CentOS%E5%AE%89%E8%A3%85jdk-tomcat-mysql/</url>
      
        <content type="html"><![CDATA[<h3 id="安装-jdk1-8"><a href="#安装-jdk1-8" class="headerlink" title="安装  jdk1.8"></a>安装  jdk1.8</h3><p>（1）前往 <a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html" target="_blank" rel="noopener">Oracle 官网</a>，选择下载 <strong>xxx-linux-xxx.tar.gz</strong> 压缩包到本地（以 jdk-8u152-linux-x64.tar.gz 为例）</p><p>（2）使用 <strong><a href="https://filezilla-project.org/" target="_blank" rel="noopener">filezilla</a></strong> 将下载的 jdk 压缩包上传至 Linux 系统下（/home/java/jdk-8u152-linux-x64.tar.gz）</p><p>（3）解压 jdk 到当前目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u152-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>（4）配置 jdk 的环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将以下配置放在文件最后</span></span><br><span class="line">export JAVA_HOME=/home/java/jdk-8u152-linux-x64</span><br><span class="line">export JRE_HOME=/home/java/jdk-8u152-linux-x64/jre</span><br><span class="line">export CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JRE_HOME/lib</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br></pre></td></tr></table></figure><p>（5）执行上述文件，使其生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>（6）查看 java 版本，验证是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><h3 id="安装-tomcat8-5"><a href="#安装-tomcat8-5" class="headerlink" title="安装  tomcat8.5"></a>安装  tomcat8.5</h3><p>（1）前往 <a href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">Apache Tomcat</a>，选择下载 <strong>Core - tar.gz</strong> 压缩包到本地（以 apache-tomcat-8.5.24.tar.gz 为例），如下图</p><p><img src="tomcat下载.png" alt="tomcat下载"></p><p>（2）使用 <strong><a href="https://filezilla-project.org/" target="_blank" rel="noopener">filezilla</a></strong> 将下载的 tomcat 压缩包上传至 Linux 系统下（/home/tomcat/apache-tomcat-8.5.24.tar.gz）</p><p>（3）解压 tomcat 到当前目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-tomcat-8.5.24.tar.gz</span><br></pre></td></tr></table></figure><p>（4）启动和关闭 tomcat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动 tomcat</span></span><br><span class="line">./home/tomcat/apache-tomcat-8.5.24/bin/startup.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭 tomcat</span></span><br><span class="line">./home/tomcat/apache-tomcat-8.5.24/bin/shutdown.sh</span><br></pre></td></tr></table></figure><h3 id="安装-mysql5-7"><a href="#安装-mysql5-7" class="headerlink" title="安装  mysql5.7"></a>安装  mysql5.7</h3><p>（1）前往 <a href="https://downloads.mysql.com/archives/community/" target="_blank" rel="noopener">MySQL官网</a>，选择如下图所示的 mysql 版本下载到本地（以 mysql-5.7.29-linux-glibc2.12-x86_64.tar.gz 为例）</p><p><img src="mysql下载.png" alt="mysql下载"></p><p>（2）使用 <strong><a href="https://filezilla-project.org/" target="_blank" rel="noopener">filezilla</a></strong> 将下载的 mysql 压缩包上传至 Linux 系统下（/home/mysql/mysql-5.7.29-linux-glibc2.12-x86_64.tar.gz）</p><p>（3）解压 mysql 到 <strong>/usr/local/mysql</strong> 目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf mysql-5.7.29-linux-glibc2.12-x86_64.tar.gz -C /usr/local/mysql/</span><br></pre></td></tr></table></figure><p>（4）添加系统组和用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd mysql</span><br><span class="line">useradd -r -g mysql -s /bin/false mysql</span><br></pre></td></tr></table></figure><p>（5）修改 mysql 目录拥有者为 mysql 用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/mysql</span><br><span class="line">chown -R mysql:mysql ./</span><br></pre></td></tr></table></figure><p>（6）数据库初始化，并且保存最后生成的密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/mysql/bin</span><br><span class="line">./mysqld --initialize --datadir=/usr/local/mysql/data --user=mysql --basedir=/usr/local/mysql</span><br></pre></td></tr></table></figure><p>（7）修改 data 目录拥有者为 mysql 用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R mysql:mysql data</span><br></pre></td></tr></table></figure><p>（8）复制启动文件到服务文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp support-files/mysql.server /etc/init.d/mysql</span><br></pre></td></tr></table></figure><p>（9）启动 mysql 服务，并设置开机自启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service mysql start</span><br><span class="line">systemctl enable mysql</span><br></pre></td></tr></table></figure><p>（10）添加 mysql 软连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/mysql/bin/mysql /usr/local/bin/mysql</span><br></pre></td></tr></table></figure><p>（11）登录 mysql，密码是在第六步生成的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p>（12）修改 root 密码，并且开发权限使用 navicat 可以连接 mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改root密码</span></span><br><span class="line">ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123456';</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 赋予root用户远程连接权限</span></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 刷新权限</span></span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
